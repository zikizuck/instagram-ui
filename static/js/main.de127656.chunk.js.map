{"version":3,"sources":["config/index.js","config/development.js","config/production.js","Header/UserBox/UserBox.js","Header/Header.js","Feed/Post/TagList/TagList.js","Feed/Post/Post.js","Feed/Feed.js","models/login.model.js","Login/Login.js","Profile/Profile.js","models/post.model.js","CreatePost/CreatePost.js","models/register.model.js","Register/Register.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["env","development","apiUrl","production","UserBox","props","state","user","fetch","config","credentials","then","res","json","setState","e","this","history","push","document","cookie","Date","toString","console","log","username","onClick","logoutHandler","bind","to","Component","withRouter","Header","toggle","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","inline","icon","faUser","React","TagList","tags","map","tag","i","key","Post","heart","cls","faCalendarAlt","created","faUserAlt","src","image","alt","about","faCommentDots","title","faHeart","hearthHandler","likes","Feed","posts","loading","dateStr","date","getMonth","getDate","getFullYear","override","css","sizeUnit","size","color","post","index","formatDate","_id","schema","yup","shape","min","max","required","password","Login","incorrectLoginMessage","values","method","body","JSON","stringify","headers","status","initialValues","validationSchema","loginModel","onSubmit","submit","htmlFor","name","component","type","Button","Profile","users","faUserFriends","gender","faStickyNote","CreatePost","data","FormData","Array","isArray","forEach","value","append","formData","convertToFormData","catch","err","postModel","render","setFieldValue","onChange","event","currentTarget","files","faCloudUploadAlt","as","handleTagsChange","faShare","birthDate","Register","registerModel","initialState","items","item","combineReducers","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","path","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de127656.chunk.js","sourcesContent":["import development from './development';\nimport production from './production';\n\nconst env = {\n    development,\n    production\n};\n\nexport default env[process.env.NODE_ENV || 'development'];","export default {\n    apiUrl: 'http://localhost:4000'\n};","export default {\n    apiUrl: 'https://instagram-api-ziki.herokuapp.com/'\n};","import React, {Component} from 'react';\nimport config from \"../../config\";\nimport {Link , BrowserRouter} from \"react-router-dom\";\nimport { withRouter } from 'react-router';\n\n\nclass UserBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null\n        }\n\n    }\n\n    componentDidMount() {\n        fetch(config.apiUrl + '/api/users/me', {\n            credentials: \"include\"\n        })\n            .then(res => res.json())\n            .then( user => {\n                this.setState({user});\n            })\n\n    }\n    logoutHandler(e) {\n        this.props.history.push('/login')\n        this.setState({\n            user:null\n        });\n        document.cookie = \"user= ; expires=\" + new Date().toString();\n        console.log('Logged out');\n\n    }\n\n    render() {\n        return (\n\n                <div>\n                    {this.state.user ? <span>{this.state.user.username}<button onClick={this.logoutHandler.bind(this)}>Log Out</button></span>\n\n\n                        : <div>\n                            <Link to=\"/register\">Register</Link>\n                            <Link to=\"/login\"><div>Login</div></Link>\n                        </div>\n                    }\n                    {/*<div>*/}\n                    {/*    <button onClick={this.logoutHandler.bind(this)}>Log Out</button>*/}\n\n                    {/*</div>*/}\n\n\n                </div>\n\n        );\n    }\n}\n\nexport default withRouter(UserBox);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport './Header.scss';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport UserBox from \"./UserBox/UserBox\";\n\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggle : false\n        }\n    }\n    switchHandler(){\n        this.setState( {\n            toggle: !this.state.toggle\n        })\n\n    }\n\n    render() {\n\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">Instagram</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Link className=\"nav-link\" to=\"/\">Home</Link>\n                        <Link className=\"nav-link\" to=\"/profile\">Profile</Link>\n                        <Link className=\"nav-link\" to=\"/post/create\">Create Post</Link>\n                    </Nav>\n                    <div inline=\"true\">\n                        <div className=\"user\">\n                            <div className=\"user-avatar\">\n                                <FontAwesomeIcon icon={faUser} />\n                                <UserBox />\n                            </div>\n                            <div className=\"user-text\">\n                            </div>\n\n                        </div>\n                    </div>\n                </Navbar.Collapse>\n            </Navbar>\n\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './Taglist.scss';\nclass TagList extends Component {\n    render() {\n        return (\n            <div >\n                {this.props.tags.map((tag,i) => {\n                    return <div key={i} className=\"tag\"><a  href=\"#\">#{tag}</a></div>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default TagList;","import React, {Component} from 'react';\nimport './Post.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCalendarAlt,faHeart,faUserAlt,faCommentDots } from '@fortawesome/free-solid-svg-icons'\nimport TagList from \"./TagList/TagList\";\nimport config from '../../config';\n\n\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            heart : false\n        }\n\n    }\n    hearthHandler() {\n        this.setState({\n            heart: !this.state.heart\n        });\n\n    }\n\n    render() {\n        const cls = this.state.heart ? 'heart' : '';\n\n        return (\n            <div className=\"d-flex\">\n                <div className=\"card\" >\n                    <div className=\"card-header\">\n                        <span className=\"cardDate\">\n                            {<FontAwesomeIcon icon={ faCalendarAlt } />}\n                            <span className=\"card-text\">{(this.props.created)}</span>\n\n                        </span>\n                        <div className=\"userId\">{<FontAwesomeIcon icon={ faUserAlt } />}{this.props.user}</div>\n\n                    </div>\n                    <div className=\"userImage\">\n                        <img src={config.apiUrl + '/' +this.props.image} alt=\"post-image\" className=\"card-img-top\" />\n\n                    </div>\n                    <div className=\"card-body\">\n                        <div>\n                            <h4>{this.props.about}</h4>\n                            <h5 key={this.props.id} className=\"card-title\">{<FontAwesomeIcon icon={ faCommentDots } />}{this.props.title}</h5>\n                        </div>\n                        <div className=\"like\"><p  className=\"card-text\">{<FontAwesomeIcon\n                            className={cls}\n                            icon={ faHeart }\n                            onClick={this.hearthHandler.bind(this)}\n                        />}{this.props.likes}</p></div>\n\n                        <footer className=\"card-footer\">\n                            <TagList tags={this.props.tags}/>\n                        </footer>\n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport Post from \"./Post/Post\";\nimport './Feed.scss';\nimport { GridLoader } from 'react-spinners';\nimport { css } from '@emotion/core';\nimport TagList from \"./Post/TagList/TagList\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHashtag, faUserFriends } from '@fortawesome/free-solid-svg-icons';\nimport config from \"../config\";\nimport ObjectId from 'bson-objectid';\n\n\nclass Feed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: [],\n            loading:false\n\n        }\n\n    }\n\n\n    componentDidMount() {\n        this.setState({loading: true});\n        fetch(config.apiUrl + '/api/posts')\n            .then(res => res.json())\n            .then(posts => {\n                this.setState({posts});\n                console.log(posts);\n\n                this.setState({posts,loading:false})\n\n            });\n\n\n\n    }\n    formatDate(dateStr) {\n        const date = new Date(dateStr);\n        const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n        return months[date.getMonth()] + ' ' + date.getDate()+ ' '+ date.getFullYear();\n    };\n\n\n\n\n    render() {\n\n\n        const override = css`\n            display:block;\n            margin: 0 auto;\n            border-color:#5798ff;\n        `;\n\n        return (\n\n\n            <div className=\"\">\n                    <div className=\"loading\">\n                        {this.state.loading ?\n                            <div>\n                                <GridLoader\n                                    css={override}\n                                    sizeUnit={\"px\"}\n                                    size={80}\n                                    color={'#5798ff'}\n                                    loading={this.state.loading}/>\n                            </div> : null\n                        }\n                    </div>\n\n\n                <div className=\"container\">\n\n                    {this.state.posts.map((post, index) => {\n\n                        return (\n\n                            <Post   title={post.title}\n                                    image={post.image}\n                                    created={this.formatDate(post.created)}\n                                    likes={post.likes}\n                                    key={post._id}\n                                    user={post.user.username}\n                                    tags={post.tags}\n                                    about={post.about}\n                                    >\n\n\n                            </Post>\n\n                        );\n\n                    })}\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Feed;\n\n\n\n\n","import * as yup from 'yup';\n\nlet schema = yup.object().shape({\n    username: yup.string().min(2).max(255).required(),\n    password: yup.string().min(2).max(16).required(),\n});\n\nexport default schema;","import React, { Component } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport loginModel from '../models/login.model';\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            incorrectLoginMessage: false\n        };\n    }\n\n    submit(values) {\n        this.setState({incorrectLoginMessage: false});\n        fetch('http://localhost:4000/api/users/login', {\n            method: 'POST',\n            body: JSON.stringify(values),\n            credentials: \"include\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => {\n            if(res.status === 200) {\n                this.props.history.push('/');\n            } else if(res.status === 403) {\n                this.setState({incorrectLoginMessage: true});\n            } else {\n                console.log('Unexpected error');\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Login</h2>\n                <hr />\n                <Formik initialValues={{username: '', password: ''}}\n                        validationSchema={loginModel}\n                        onSubmit={this.submit.bind(this)}>\n                    <Form className=\"col-xs-12 col-md-6\">\n                        {this.state.incorrectLoginMessage ? <div className=\"row alert alert-danger mt-2\">Incorrect username or password</div> : null}\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"username\">Username:</label>\n                            <Field name=\"username\" id=\"username\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"username\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"password\">Password:</label>\n                            <Field type=\"password\" name=\"password\" id=\"password\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"password\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group d-flex justify-content-end\">\n                            <Button type=\"submit\">Login</Button>\n                        </div>\n                    </Form>\n                </Formik>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Login);","import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser ,faUserFriends, faStickyNote} from '@fortawesome/free-solid-svg-icons';\nimport config from \"../config\";\nimport Login from \"../Login/Login\";\n\nclass Profile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: []\n        }\n\n    }\n\n    componentDidMount() {\n        fetch(config.apiUrl + '/api/users', {\n            credentials: \"include\",\n            method : 'GET'\n        })\n            .then(res => res.json())\n            .then( users => {\n                this.setState({users});\n                console.log(users);\n            })\n\n    }\n    render() {\n        return (\n            <div>\n                Profile:\n                {this.state.users.map((user, index) => {\n\n                    return (\n                    <div className=\"container-fluid\">\n                        <div>{<FontAwesomeIcon icon={ faUser } />}   user name : {user.username}</div>\n                        <div>{<FontAwesomeIcon icon={ faUserFriends } />}   user gender : {user.gender}</div>\n                        <div>{<FontAwesomeIcon icon={ faStickyNote } />}   user about : {user.about}</div>\n                    </div>\n                    )\n\n\n                })}\n\n\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import * as yup from 'yup';\n\nlet schema = yup.object().shape({\n    title: yup.string().min(2).max(255).required(),\n    image: yup.mixed().required(),\n    tags: yup.string(),\n    about: yup.string()\n});\n\nexport default schema;","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport postModel from '../models/post.model';\nimport './CreatePost.scss';\nimport { faCloudUploadAlt, faShare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport TagsInput from 'react-tagsinput';\nimport config from '../config';\n\nclass CreatePost extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags: []\n        };\n    }\n\n    handleTagsChange(tags) {\n        this.setState({\n            tags: tags\n        });\n    }\n\n    convertToFormData(values) {\n        const data = new FormData();\n        for (let key in values) {\n            Array.isArray(values[key])\n                ? values[key].forEach(value => data.append(key + '[]', value))\n                : data.append(key, values[key]) ;\n        }\n        return data;\n    }\n\n    submit(values) {\n        const formData = this.convertToFormData(values);\n        fetch(config.apiUrl + '/api/posts', {\n            method: 'POST',\n            body: formData,\n            credentials: \"include\"\n        }).then(res => res.json())\n            .then(post => console.log(post))\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <div className=\"CreatePost\">\n                <h2>Create Post</h2>\n                <Formik initialValues={{image: '', about: '' ,title: '', tags: []}}\n                        validationSchema={postModel}\n                        onSubmit={this.submit.bind(this)}\n                        render={({setFieldValue}) => {\n                            return <Form className=\"col-xs-12 col-md-6\">\n                                <div className=\"row form-group\">\n                                    <input type=\"file\" name=\"image\" id=\"image\" onChange={(event) => {\n                                        setFieldValue('image', event.currentTarget.files[0]);\n                                    }} />\n                                    <label htmlFor=\"image\" className=\"upload-button\">\n\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCloudUploadAlt} />\n\t\t\t\t\t\t\t\t\t\t\tSelect an image\n\t\t\t\t\t\t\t\t\t\t</span>\n                                    </label>\n                                    <div className=\"container-fluid row\">\n                                        <ErrorMessage className=\"alert alert-danger mt-2\" name=\"image\" component=\"div\" />\n                                    </div>\n                                </div>\n                                <div className=\"row form-group\">\n                                    <label>About:</label>\n                                    <Field as=\"textarea\" name=\"about\" className=\"form-control\" />\n                                    <ErrorMessage className=\"alert alert-danger mt-2\" name=\"about\" component=\"div\" />\n                                </div>\n                                <div className=\"row form-group\">\n                                    <label>Title:</label>\n                                    <Field as=\"textarea\" name=\"title\" className=\"form-control\" />\n                                    <ErrorMessage className=\"alert alert-danger mt-2\" name=\"title\" component=\"div\" />\n                                </div>\n                                <div className=\"row form-group\">\n                                    <label>Tags:</label>\n                                    <TagsInput value={this.state.tags}\n                                               onChange={(tags) => {\n                                                   this.handleTagsChange(tags);\n                                                   setFieldValue('tags', tags);\n                                               }}\n                                               className=\"tags-wrapper\" />\n                                    <ErrorMessage className=\"alert alert-danger mt-2\" name=\"tags\" component=\"div\" />\n                                    <div><sub>Press Enter after inserting a tag</sub></div>\n                                </div>\n                                <div className=\"row form-group d-flex justify-content-end\">\n                                    <Button type=\"submit\">\n                                        <FontAwesomeIcon icon={faShare} />&nbsp;\n                                        Share\n                                    </Button>\n                                </div>\n                            </Form>;\n                        }}>\n                </Formik>\n            </div>\n        );\n    }\n}\n\nexport default CreatePost;\n\n\n\n\n\n// import React, {Component} from 'react';\n// import { Formik, Field,Form , ErrorMessage} from 'formik';\n// import postModel from '../models/post.model';\n// import './CreatePost.scss';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faShareSquare , faCloudDownloadAlt} from '@fortawesome/free-solid-svg-icons'\n// import AutosizeInput from 'react-input-autosize';\n// import InputTag from \"./InputTag/InputTag\";\n//\n//\n// // import {Button} from 'React.Bootstrap';\n//\n//\n//\n// class CreatePost extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             tags: []\n//         };\n//     }\n//\n//     handleTagsChange(tags) {\n//         this.setState({\n//             tags: tags\n//         });\n//     }\n//\n//     convertToFormData(values) {\n//         const data = new FormData();\n//         for (let key in values) {\n//             Array.isArray(values[key])\n//                 ? values[key].forEach(value => data.append(key + '[]', value))\n//                 : data.append(key, values[key]) ;\n//         }\n//         return data;\n//     }\n//\n//     submit(values) {\n//         const formData = this.convertToFormData(values);\n//         fetch(config.apiUrl + '/api/posts', {\n//             method: 'POST',\n//             body: formData\n//         }).then(res => res.json())\n//             .then(post => console.log(post))\n//             .catch(err => console.log(err));\n//     }\n//\n//\n//     // submit(values){\n//     //     console.log(values);\n//     //\n//     // }\n//     render() {\n//         return (\n//             <div className=\"container form-box\">\n//                 <h4>Create Post</h4>\n//                 <Formik initialValues={{image: '', title: '', tags: []}}\n//                         validationSchema={postModel}\n//                         onSubmit={this.submit.bind(this)}\n//                         render={({setFieldValue}) => {\n//                             return <Form className=\"col-xs-12 col-md-6\">\n//                         <div className=\"form-group \">\n//                             <input type=\"file\" name=\"image\" id=\"image\" onChange={(event) => {\n//                                 setFieldValue('image', event.currentTarget.files[0]);\n//                             }} />\n//                             <label htmlFor=\"image\" className=\"upload-button\">\n// \t\t\t\t\t\t\t\t\t\t<span>\n// \t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCloudUploadAlt} />\n// \t\t\t\t\t\t\t\t\t\t\tSelect an image\n// \t\t\t\t\t\t\t\t\t\t</span>\n//                             </label>\n//                             <div className=\"container-fluid row\">\n//                                 <ErrorMessage className=\"alert alert-danger mt-2\" name=\"image\" component=\"div\" />\n//                             </div>\n//\n//                         </div >\n//                         <div className=\"form-group mb-3\">\n//                             <label htmlFor=\"\">Title</label>\n//                             <Field  className=\"form-control\" placeholder=\"title\" name=\"title\"   />\n//                             <ErrorMessage  className=\"alert alert-danger\" name=\"title\" component=\"div\" />\n//\n//                         </div>\n//                         <div className=\"form-group \">\n//                             <label htmlFor=\"\">Tags</label>\n//                             <InputTag />\n//                         </div>\n//                         <div className=\"form-group\">\n//                             <button type=\"submit\" className=\"btn btn-primary\">{<FontAwesomeIcon icon={ faShareSquare } />}Share Post</button>\n//\n//                         </div>\n//                     </Form>\n//                         }}>\n//                 </Formik>\n//\n//             </div>\n//         );\n//     }\n// }\n//\n// export default CreatePost;","import * as yup from 'yup';\n\nlet schema = yup.object().shape({\n    name: yup.string().min(2).max(255).required(),\n    username: yup.string().min(2).max(255).required(),\n    password: yup.string().min(2).max(16).required(),\n    gender: yup.string().required(),\n    birthDate: yup.date().required(),\n    about: yup.string()\n});\n\nexport default schema;","import React, { Component } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport registerModel from '../models/register.model';\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nclass Register extends Component {\n\n    submit(values) {\n        fetch('http://localhost:4000/api/users', {\n            method: 'POST',\n            body: JSON.stringify(values),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(() => this.props.history.push('/'));\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Registration</h2>\n                <hr />\n                <Formik initialValues={{name: '', username: '', password: '', birthDate: new Date(), gender: 'm', about: ''}}\n                        validationSchema={registerModel}\n                        onSubmit={this.submit.bind(this)}>\n                    <Form className=\"col-xs-12 col-md-6\">\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"name\">Name:</label>\n                            <Field name=\"name\" id=\"name\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"name\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"username\">Username:</label>\n                            <Field name=\"username\" id=\"username\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"username\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"password\">Password:</label>\n                            <Field type=\"password\" name=\"password\" id=\"password\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"password\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"birthDate\">Birth Date:</label>\n                            <Field type=\"date\" name=\"birthDate\" id=\"birthDate\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"birthDate\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"gender\">Gender:</label>\n                            <Field component=\"select\" name=\"birthDate\" id=\"gender\" className=\"form-control\">\n                                <option value=\"m\">Male</option>\n                                <option value=\"f\">Female</option>\n                            </Field>\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"birthDate\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group\">\n                            <label htmlFor=\"about\">About:</label>\n                            <Field as=\"textarea\" id=\"about\" name=\"about\" className=\"form-control\" />\n                            <ErrorMessage className=\"alert alert-danger mt-2\" name=\"about\" component=\"div\" />\n                        </div>\n                        <div className=\"row form-group d-flex justify-content-end\">\n                            <Button type=\"submit\">Register</Button>\n                        </div>\n                    </Form>\n                </Formik>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Register);","import {FECTH_POSTS , NEW_POST} from \"../actions/types\";\n\nconst initialState = {\n    items : [],\n    item : {}\n}\n\n\n\nexport default function (state = initialState,action) {\n    switch(action.type){\n        default :\n            return state;\n    }\n    \n}","import {combineReducers} from 'redux';\nimport postReducer from './postReducer';\n\n\n\n\n\nexport default combineReducers({\n    posts : postReducer\n})","import {createStore , applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer , initialState , applyMiddleware(...middleware));\n\nexport  default store;","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n\n} from \"react-router-dom\";\nimport CreatePost from \"./CreatePost/CreatePost\";\nimport Register from \"./Register/Register\";\nimport Login from \"./Login/Login\";\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport UserBox from \"./Header/UserBox/UserBox\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <Router>\n            <div className=\"App\">\n                <Header/>\n                <main>\n                    <Switch>\n                        <Route path=\"/profile\">\n                            <Profile/>\n                        </Route>\n                        <Route path=\"/post/create\">\n                            <CreatePost/>\n                        </Route>\n                        <Route path=\"/register\">\n                            <Register/>\n                        </Route>\n                        <Route path=\"/login\">\n                            <Login/>\n                        </Route>\n                        <Route path=\"/\">\n                            <Feed />\n                        </Route>\n\n                    </Switch>\n                </main>\n\n\n            </div>\n        </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Header/Header.js","Feed/Post/TagList/TagList.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","About/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","toggle","this","setState","cls","className","href","onClick","switchHandler","bind","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","React","Component","TagList","tags","map","tag","i","key","Post","heart","icon","faCalendarAlt","created","faUserAlt","userId","src","image","alt","title","faHeart","hearthHandler","likes","Feed","posts","loading","fetch","then","res","json","console","log","override","css","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","date","getDate","sizeUnit","size","color","post","index","Profile","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77c3858e.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\nimport { Link } from 'react-router-dom';\n\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggle : false\n        }\n    }\n    switchHandler(){\n        this.setState( {\n            toggle: !this.state.toggle\n        })\n\n    }\n\n    render() {\n        const cls = this.state.toggle ? 'navbar-collapse ' : ' collapse   ';\n\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"#\">Instagram</a>\n                <button onClick={this.switchHandler.bind(this)}\n                    className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\">\n                        <div className={cls} id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item active\">\n                                <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/profile\">Profile</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\n                            </li>\n                        </ul>\n                    </div>\n                    </span>\n\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/profile\">Profile</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './Taglist.scss';\nclass TagList extends Component {\n    render() {\n        return (\n            <div >\n                {this.props.tags.map((tag,i) => {\n                    return <div key={i} className=\"tag\"><a  href=\"#\">#{tag}</a></div>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default TagList;","import React, {Component} from 'react';\nimport './Post.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCalendarAlt, faUserFriends,faHeart,faUserAlt } from '@fortawesome/free-solid-svg-icons'\nimport TagList from \"./TagList/TagList\";\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            heart : false\n        }\n\n    }\n    hearthHandler() {\n        this.setState({\n            heart: !this.state.heart\n        });\n\n    }\n\n    render() {\n        const cls = this.state.heart ? 'heart' : '';\n\n        return (\n            <div className=\"d-flex\">\n                <div className=\"card\" >\n                    <div className=\"card-header\">\n                        <span className=\"cardDate\">\n                            {<FontAwesomeIcon icon={ faCalendarAlt } />}\n                            <span className=\"card-text\">{(this.props.created)}</span>\n\n                        </span>\n                        <div className=\"userId\">{<FontAwesomeIcon icon={ faUserAlt } />}{this.props.userId}</div>\n\n                    </div>\n                    <div className=\"userImage\">\n                        <img src={this.props.image} alt=\"post-image\" className=\"card-img-top\" />\n\n                    </div>\n                    <div className=\"card-body\">\n                        <div><h5 key={this.props.id} className=\"card-title\">{this.props.title}</h5></div>\n                        <div className=\"like\"><p  className=\"card-text\">{<FontAwesomeIcon\n                            className={cls}\n                            icon={ faHeart }\n                            onClick={this.hearthHandler.bind(this)}\n                        />}{this.props.likes}</p></div>\n\n                        <footer className=\"card-footer\">\n                            <TagList tags={this.props.tags}/>\n                        </footer>\n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport Post from \"./Post/Post\";\nimport './Feed.scss';\nimport { GridLoader } from 'react-spinners';\nimport { css } from '@emotion/core';\n\nimport TagList from \"./Post/TagList/TagList\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHashtag, faUserFriends } from '@fortawesome/free-solid-svg-icons';\n\n\nclass Feed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: [],\n            loading:false\n\n        }\n\n    }\n\n\n    componentDidMount() {\n        this.setState({loading: true});\n        fetch('https://my-json-server.typicode.com/evyros/fake-api/posts')\n            .then(res => res.json())\n            .then(posts => {\n                this.setState({posts});\n                console.log(posts);\n\n                this.setState({posts,loading:false})\n\n            });\n\n\n\n    }\n\n\n    render() {\n        const override = css`\n            display:block;\n            margin: 0 auto;\n            border-color:#5798ff;\n        `;\n        function timeConverter(UNIX_timestamp) {\n            let a = new Date(UNIX_timestamp * 1000);\n            let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n            let year = a.getFullYear();\n            let month = months[a.getMonth()];\n            let date = a.getDate();\n\n            let time = `${date} ${month} ${year}`;\n            return time;\n\n        }\n        // setTimeout(() => {}, 5000);\n\n\n\n        return (\n\n\n            <div className=\"\">\n                    <div className=\"loading\">\n                        {this.state.loading ?\n                            <div>\n                                <GridLoader\n                                    css={override}\n                                    sizeUnit={\"px\"}\n                                    size={80}\n                                    color={'#5798ff'}\n                                    loading={this.state.loading}/>\n                            </div> : null\n                        }\n                    </div>\n\n\n                <div className=\"container\">\n\n                    {this.state.posts.map((post, index) => {\n\n                        return (\n\n                            <Post   title={post.title}\n                                    image={post.image}\n                                    created={timeConverter(post.created)}\n                                    likes={post.likes}\n                                    key={post.id}\n                                    userId={post.userId}\n                                    tags={post.tags}\n                                    >\n\n\n                            </Post>\n\n                        );\n\n                    })}\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Feed;","import React, {Component} from 'react';\n\nclass Profile extends Component {\n    render() {\n        return (\n            <div>\n                Profile\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, {Component} from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <div>\n                <h1>About</h1>\n            </div>\n        );\n    }\n}\n\nexport default About;","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport About from \"./About/About\";\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"App\">\n            <Header/>\n            <main>\n                <Switch>\n                    <Route path=\"/profile\">\n                        <Profile/>\n                    </Route>\n                    <Route path=\"/about\">\n                       <About/>\n                    </Route>\n                    <Route path=\"/\">\n\n                        <Feed />\n                    </Route>\n\n                </Switch>\n            </main>\n\n\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}